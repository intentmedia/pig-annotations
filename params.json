{"name":"Pig-annotations","body":"## pig-annotations\r\n\r\n_pig-annotations_ is a class library that makes it easy to load your\r\ncustom serialized java objects into [pig][1] as proper pig Tuples with a\r\nwell-defined schema.\r\n\r\n### Should I use _pig-annotations_?\r\n\r\n_pig-annotations_ has a rather narrow scope.  You should probably only\r\nuse _pig-annotations_ if the following is true:\r\n\r\n* You use java.  _pig-annotations_ is a java library.\r\n* You use [pig][1].\r\n* You already have a custom means of serializing your java objects in a **line-based** text format (like json).\r\n\r\n### How do I use _pig-annotations_?\r\n\r\nUsing _pig-annotations_ is straightforward.  \r\n\r\n* You will need to provide an implementation of [RecordInflater][2] to convert \r\n  from a line of text into your java object.  This implementation must have a \r\n  no-arg public constructor.\r\n* You will need to annotate your object to specify how to convert the\r\n  fields into values within a tuple.\r\n\r\n## Example\r\n\r\nIt is probably easiest to demonstrate via an example.  \r\n\r\nLet's say you have a *Person* class that has two fields, age and gender.\r\n\r\n```java\r\npackage com.intentmedia.examples;\r\n\r\npublic class Person {\r\n    private String gender;\r\n    private Integer age;\r\n\r\n    // getters, setters, etc.\r\n}\r\n```\r\n\r\nYou need to tell _pig-annotations_ how to transform each field.\r\n\r\n```java\r\npackage com.intentmedia.examples;\r\n\r\nimport com.intentmedia.pig.PigField;\r\n\r\nimport static org.apache.pig.data.DataType.CHARARRAY;\r\nimport static org.apache.pig.data.DataType.INTEGER;\r\n\r\npublic class Person {\r\n\r\n    @PigField(name = \"gender\", type = CHARARRAY)\r\n    private String gender;\r\n\r\n\r\n    @PigField(name = \"gender\", type = INTEGER)\r\n    private Integer age;\r\n\r\n    // getters, setters, etc.\r\n}\r\n```\r\n\r\nFor each field, you supply a name, and what Pig data type to map it to.\r\n\r\nFinally, you need to tell _pig-annotations_ how to load your object\r\nbefore it can turn it into a pig tuple.  If your objects were stored as\r\na csv like this:\r\n\r\n```\r\nmale,25\r\nfemale,26\r\n```\r\n\r\nThen you need to implement `RecordInflater<Person>`.\r\n\r\n```java\r\npackage com.intentmedia.examples;\r\n\r\nimport com.intentmedia.examples.Person;\r\nimport com.intentmedia.convert.RecordInflater;\r\nimport org.apache.hadoop.io.Text;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\npublic class PersonFromCsvInflater implements RecordInflater<Person> {\r\n    @NotNull\r\n    @Override\r\n    public Person convert(@NotNull Text value) throws IllegalArgumentException {\r\n\r\n        String[] genderAndAge = value.toString().split(\",\");\r\n\r\n        Person person = new Person();\r\n        person.setGender(genderAndAge[0]);\r\n        person.setAge(Integer.parseInt(genderAndAge[1]));\r\n\r\n        return person;\r\n    }\r\n}\r\n```\r\n\r\nFinally, just add one more annotation to your _Person_ class.\r\n\r\n```java\r\npackage com.intentmedia.examples;\r\n\r\nimport com.intentmedia.pig.PigField;\r\n\r\nimport static org.apache.pig.data.DataType.CHARARRAY;\r\nimport static org.apache.pig.data.DataType.INTEGER;\r\n\r\n@PigLoadable(recordInflater = PersonFromCsvInflater.class)\r\npublic class Person {\r\n\r\n    @PigField(name = \"gender\", type = CHARARRAY)\r\n    private String gender;\r\n\r\n\r\n    @PigField(name = \"gender\", type = INTEGER)\r\n    private Integer age;\r\n\r\n    // getters, setters, etc.\r\n}\r\n```\r\n\r\nNow, to load your objects via pig, you would use a load function like:\r\n\r\n\r\n```\r\nREQUIRE 'location/to/pig-annotations.jar'\r\nREQUIRE 'your/jar/with/other/classes.jar'\r\n\r\npeople = LOAD 'your/input/files/*.csv' \r\n  USING com.intentmedia.pig.AnnotatedObjectLoader('com.intentmedia.examples.Person');\r\n\r\n```\r\n\r\nAnd the `people` alias will have the pig schema `tuple(gender:chararray,age:int)`.\r\n\r\n## But wait, there's more\r\n\r\n_pig-annotations_ also supports the following features:\r\n\r\n* Custom converters for fields that can't be autoboxed into pig types.\r\n* Mapping Booleans to Integers (because Pig doesn't have booleans yet)\r\n* Unwrapping fields annotated with @Embedded\r\n\r\n[1]: http://pig.apache.org \"Apache Pig\"\r\n[2]: https://github.com/intentmedia/pig-annotations/blob/master/src/main/java/com/intentmedia/convert/RecordInflater.java","tagline":"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}